# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: tqwsssdbmov7q-dev  # set this to the name of your Azure Web App
# Existing
  registryName: tqwsssdbmov7qwthreg
  repositoryName: dockertestimage
  dockerFolderPath: Application/src/RazorPagesTestSample/
  tag: ${{ github.sha }}
  #tag: latest
  ACR_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
  image_name: dockertestimage
  login_server: tqwsssdbmov7qwthreg.azurecr.io

on:
  push:
    branches: [ "main" ]
    paths: 'Application/**'
  pull_request:
    branches: [ "main" ]
    paths: 'Application/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # This workflow contains a job called "build"
  build1:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj
    - name: Build
      run: dotnet build --no-restore ./Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj
    - name: Test
      run: dotnet test --no-build --verbosity normal ./Application/tests/RazorPagesTestSample.Tests/RazorPagesTestSample.Tests.csproj
    
  build2:
    needs: build1 #waits for Build 1 to complete.
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
  
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          # Container registry username
          username: ${{ secrets.USER_NAME }}
          # Container registry password
          password: ${{ secrets.PASSWORD }}
          # Container registry server url
          login-server: ${{ env.login_server }}
          
      - name: Build and Push Image to ACR
        run: |
          cd Application/src/RazorPagesTestSample/
          ls -l
          docker build -t ${{ env.ACR_REGISTRY }}/${{ env.image_name }}:${{ env.tag }} .
          docker push ${{ env.ACR_REGISTRY }}/${{ env.image_name }}:${{ env.tag }}

  build3:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build2
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Azure
        uses: azure/login@v1
        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#          # Container registry username
          username: ${{ secrets.USER_NAME }}
          # Container registry password
          password: ${{ secrets.PASSWORD }}
          # Container registry server url
          login-server: ${{ env.login_server }}
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
